import express from "express";
import dotenv from "dotenv";
import { OpenAI } from "openai";
import { createClient } from "@supabase/supabase-js";
import fetch from "node-fetch";
import cors from "cors";

dotenv.config();
const app = express();
app.use(express.json());
app.use(cors());

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

app.post("/generatelaunchdata", async (req, res) => {
  const { url, user_id } = req.body;
  console.log("🔍 Received from frontend:", { url, user_id });

  if (!url || !url.startsWith("http")) {
    return res.status(400).json({ error: "Invalid or missing URL" });
  }

  try {
    const htmlResponse = await fetch(url, {
      headers: { "User-Agent": "Mozilla/5.0" }
    });
    const html = await htmlResponse.text();

    // Generate safe website screenshot
    const generateThumbnailUrl = (url) => {
      try {
        // ScreenshotOne - reliable and safe service
        const screenshotUrl = `https://api.screenshotone.com/take?url=${encodeURIComponent(url)}&format=png&viewport_width=1200&viewport_height=630&device_scale_factor=1&block_ads=true&block_cookie_banners=true&cache=true&delay=2`;
        return screenshotUrl;
      } catch (error) {
        console.error('Screenshot URL generation failed:', error);
        return null;
      }
    };

    const prompt = `
      You are a data extraction AI. Extract information from this website and return ONLY a valid JSON object with no additional text.
      
      Required JSON format:
      {
        "name": "company/product name",
        "tagline": "short compelling tagline",
        "description": "detailed description (2-3 sentences)",
        "logo": "logo image URL if found",
        "category": "detected category (saas, ai, fintech, ecommerce, etc.)",
        "features": ["tag1", "tag2", "tag3", "tag4", "tag5"],
        "emails": ["email@example.com"],
        "social_links": ["https://twitter.com/...", "https://linkedin.com/..."],
        "other_links": ["https://app.example.com", "https://github.com/..."]
      }
      
      Website HTML (first 7000 chars):
      ${html.slice(0, 7000)}
      
      Return only the JSON object, no other text:
    `;

    console.log("🤖 Calling OpenAI API...");
    let gptresponse;
    try {
      gptresponse = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        temperature: 0
      });
    } catch (openaiError) {
      console.error("❌ OpenAI API error:", openaiError.message);
      return res.status(500).json({
        err: true,
        message: "OpenAI API failed: " + openaiError.message
      });
    }

    console.log("📝 Raw GPT response:", gptresponse.choices[0].message.content);

    let result;
    try {
      const rawContent = gptresponse.choices[0].message.content.trim();
      // Remove any markdown code blocks if present
      const jsonContent = rawContent.replace(/```json\s*|\s*```/g, '').trim();
      result = JSON.parse(jsonContent);
    } catch (e) {
      console.error("❌ GPT JSON parse error:", gptresponse.choices[0].message.content);
      console.error("❌ Parse error details:", e.message);

      // Fallback: create basic data from URL
      const fallbackResult = {
        name: url.replace(/https?:\/\/(www\.)?/, '').split('/')[0].replace(/\./g, ' ').toUpperCase(),
        tagline: "Innovative solution for modern needs",
        description: "This product offers cutting-edge features designed to solve real-world problems and enhance user experience.",
        logo: "",
        features: ["User-friendly", "Scalable", "Secure"],
        emails: [],
        social_links: [],
        other_links: []
      };

      console.log("🔄 Using fallback data:", fallbackResult);
      result = fallbackResult;
    }

    // Don't insert automatically - just return the extracted data
    console.log("✅ AI extraction successful:", result);
    console.log("🔍 Result keys:", Object.keys(result));
    console.log("📂 Category from AI:", result.category);
    console.log("🏷️ Features from AI:", result.features);
    console.log("🎨 Logo from AI:", result.logo);

    // Validate logo URL accessibility
    let validatedLogoUrl = "";
    if (result.logo) {
      try {
        // Try to fetch the logo to check if it's accessible
        const logoResponse = await fetch(result.logo, {
          method: 'HEAD',
          headers: { "User-Agent": "Mozilla/5.0" }
        });
        if (logoResponse.ok) {
          validatedLogoUrl = result.logo;
          console.log("✅ Logo URL validated:", validatedLogoUrl);
        } else {
          console.log("❌ Logo URL not accessible:", result.logo, "Status:", logoResponse.status);
        }
      } catch (error) {
        console.log("❌ Logo URL validation failed:", result.logo, error.message);
      }
    }

    // Generate thumbnail URL
    const thumbnailUrl = generateThumbnailUrl(url);
    console.log("🖼️ Generated thumbnail URL:", thumbnailUrl);
    console.log("🎨 Logo URL found:", validatedLogoUrl || "No valid logo found");

    // Return the data in the format expected by frontend
    const responseData = {
      name: result.name || "",
      website_url: url,
      tagline: result.tagline || "",
      description: result.description || "",
      category: result.category || "",
      links: [...(result.social_links || []), ...(result.other_links || [])],
      features: result.features || [],
      logo_url: validatedLogoUrl || "",
      thumbnail_url: thumbnailUrl,
      success: true
    };

    console.log("📤 Sending response to frontend:", responseData);
    res.json(responseData);

  } catch (err) {
    console.error("❌ Server error:", err);
    res.status(500).json({ error: true, message: err.message });
  }
});

app.listen(3001, () =>
  console.log("🧠 AI backend running at http://localhost:3001")
);
